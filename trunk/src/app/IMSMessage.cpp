// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IMSMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "IMSMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* AddStreamMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddStreamMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* DelStreamMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DelStreamMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* StreamEndMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StreamEndMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* StreamClientsCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StreamClientsCount_reflection_ = NULL;
const ::google::protobuf::Descriptor* NumClientsReplyMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NumClientsReplyMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* NewStreamMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewStreamMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* StopStreamMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StopStreamMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* IMSMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IMSMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_IMSMessage_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_IMSMessage_2eproto() {
  protobuf_AddDesc_IMSMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "IMSMessage.proto");
  GOOGLE_CHECK(file != NULL);
  AddStreamMsg_descriptor_ = file->message_type(0);
  static const int AddStreamMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddStreamMsg, streamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddStreamMsg, rtmpsinkip_),
  };
  AddStreamMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AddStreamMsg_descriptor_,
      AddStreamMsg::default_instance_,
      AddStreamMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddStreamMsg, _has_bits_[0]),
      -1,
      -1,
      sizeof(AddStreamMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddStreamMsg, _internal_metadata_),
      -1);
  DelStreamMsg_descriptor_ = file->message_type(1);
  static const int DelStreamMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelStreamMsg, streamid_),
  };
  DelStreamMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DelStreamMsg_descriptor_,
      DelStreamMsg::default_instance_,
      DelStreamMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelStreamMsg, _has_bits_[0]),
      -1,
      -1,
      sizeof(DelStreamMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelStreamMsg, _internal_metadata_),
      -1);
  StreamEndMsg_descriptor_ = file->message_type(2);
  static const int StreamEndMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamEndMsg, streamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamEndMsg, rtmpsinkip_),
  };
  StreamEndMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StreamEndMsg_descriptor_,
      StreamEndMsg::default_instance_,
      StreamEndMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamEndMsg, _has_bits_[0]),
      -1,
      -1,
      sizeof(StreamEndMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamEndMsg, _internal_metadata_),
      -1);
  StreamClientsCount_descriptor_ = file->message_type(3);
  static const int StreamClientsCount_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamClientsCount, streamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamClientsCount, numclients_),
  };
  StreamClientsCount_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StreamClientsCount_descriptor_,
      StreamClientsCount::default_instance_,
      StreamClientsCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamClientsCount, _has_bits_[0]),
      -1,
      -1,
      sizeof(StreamClientsCount),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamClientsCount, _internal_metadata_),
      -1);
  NumClientsReplyMsg_descriptor_ = file->message_type(4);
  static const int NumClientsReplyMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NumClientsReplyMsg, streamclients_),
  };
  NumClientsReplyMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NumClientsReplyMsg_descriptor_,
      NumClientsReplyMsg::default_instance_,
      NumClientsReplyMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NumClientsReplyMsg, _has_bits_[0]),
      -1,
      -1,
      sizeof(NumClientsReplyMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NumClientsReplyMsg, _internal_metadata_),
      -1);
  NewStreamMsg_descriptor_ = file->message_type(5);
  static const int NewStreamMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewStreamMsg, streamid_),
  };
  NewStreamMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NewStreamMsg_descriptor_,
      NewStreamMsg::default_instance_,
      NewStreamMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewStreamMsg, _has_bits_[0]),
      -1,
      -1,
      sizeof(NewStreamMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewStreamMsg, _internal_metadata_),
      -1);
  StopStreamMsg_descriptor_ = file->message_type(6);
  static const int StopStreamMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopStreamMsg, streamid_),
  };
  StopStreamMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StopStreamMsg_descriptor_,
      StopStreamMsg::default_instance_,
      StopStreamMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopStreamMsg, _has_bits_[0]),
      -1,
      -1,
      sizeof(StopStreamMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopStreamMsg, _internal_metadata_),
      -1);
  IMSMessage_descriptor_ = file->message_type(7);
  static const int IMSMessage_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMSMessage, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMSMessage, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMSMessage, addstream_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMSMessage, delstream_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMSMessage, streamend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMSMessage, numclientsreplies_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMSMessage, newstream_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMSMessage, stopstream_),
  };
  IMSMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      IMSMessage_descriptor_,
      IMSMessage::default_instance_,
      IMSMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMSMessage, _has_bits_[0]),
      -1,
      -1,
      sizeof(IMSMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMSMessage, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_IMSMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AddStreamMsg_descriptor_, &AddStreamMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DelStreamMsg_descriptor_, &DelStreamMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StreamEndMsg_descriptor_, &StreamEndMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StreamClientsCount_descriptor_, &StreamClientsCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NumClientsReplyMsg_descriptor_, &NumClientsReplyMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NewStreamMsg_descriptor_, &NewStreamMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StopStreamMsg_descriptor_, &StopStreamMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      IMSMessage_descriptor_, &IMSMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_IMSMessage_2eproto() {
  delete AddStreamMsg::default_instance_;
  delete AddStreamMsg_reflection_;
  delete DelStreamMsg::default_instance_;
  delete DelStreamMsg_reflection_;
  delete StreamEndMsg::default_instance_;
  delete StreamEndMsg_reflection_;
  delete StreamClientsCount::default_instance_;
  delete StreamClientsCount_reflection_;
  delete NumClientsReplyMsg::default_instance_;
  delete NumClientsReplyMsg_reflection_;
  delete NewStreamMsg::default_instance_;
  delete NewStreamMsg_reflection_;
  delete StopStreamMsg::default_instance_;
  delete StopStreamMsg_reflection_;
  delete IMSMessage::default_instance_;
  delete IMSMessage_reflection_;
}

void protobuf_AddDesc_IMSMessage_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_IMSMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020IMSMessage.proto\"4\n\014AddStreamMsg\022\020\n\010st"
    "reamId\030\001 \001(\t\022\022\n\nrtmpSinkIP\030\002 \003(\t\" \n\014DelS"
    "treamMsg\022\020\n\010streamId\030\001 \001(\t\"4\n\014StreamEndM"
    "sg\022\020\n\010streamId\030\001 \001(\t\022\022\n\nrtmpSinkIP\030\002 \001(\t"
    "\":\n\022StreamClientsCount\022\020\n\010streamId\030\001 \001(\t"
    "\022\022\n\nnumClients\030\002 \001(\005\"@\n\022NumClientsReplyM"
    "sg\022*\n\rstreamclients\030\001 \003(\0132\023.StreamClient"
    "sCount\" \n\014NewStreamMsg\022\020\n\010streamId\030\001 \001(\t"
    "\"!\n\rStopStreamMsg\022\020\n\010streamId\030\001 \001(\t\"\204\002\n\n"
    "IMSMessage\022\r\n\005seqNo\030\001 \001(\003\022\013\n\003cmd\030\002 \001(\t\022 "
    "\n\taddStream\030\003 \001(\0132\r.AddStreamMsg\022 \n\tdelS"
    "tream\030\004 \001(\0132\r.DelStreamMsg\022 \n\tstreamEnd\030"
    "\005 \001(\0132\r.StreamEndMsg\022.\n\021NumClientsReplie"
    "s\030\006 \001(\0132\023.NumClientsReplyMsg\022 \n\tnewStrea"
    "m\030\007 \001(\0132\r.NewStreamMsg\022\"\n\nstopStream\030\010 \001"
    "(\0132\016.StopStreamMsg", 618);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "IMSMessage.proto", &protobuf_RegisterTypes);
  AddStreamMsg::default_instance_ = new AddStreamMsg();
  DelStreamMsg::default_instance_ = new DelStreamMsg();
  StreamEndMsg::default_instance_ = new StreamEndMsg();
  StreamClientsCount::default_instance_ = new StreamClientsCount();
  NumClientsReplyMsg::default_instance_ = new NumClientsReplyMsg();
  NewStreamMsg::default_instance_ = new NewStreamMsg();
  StopStreamMsg::default_instance_ = new StopStreamMsg();
  IMSMessage::default_instance_ = new IMSMessage();
  AddStreamMsg::default_instance_->InitAsDefaultInstance();
  DelStreamMsg::default_instance_->InitAsDefaultInstance();
  StreamEndMsg::default_instance_->InitAsDefaultInstance();
  StreamClientsCount::default_instance_->InitAsDefaultInstance();
  NumClientsReplyMsg::default_instance_->InitAsDefaultInstance();
  NewStreamMsg::default_instance_->InitAsDefaultInstance();
  StopStreamMsg::default_instance_->InitAsDefaultInstance();
  IMSMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_IMSMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_IMSMessage_2eproto {
  StaticDescriptorInitializer_IMSMessage_2eproto() {
    protobuf_AddDesc_IMSMessage_2eproto();
  }
} static_descriptor_initializer_IMSMessage_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddStreamMsg::kStreamIdFieldNumber;
const int AddStreamMsg::kRtmpSinkIPFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddStreamMsg::AddStreamMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AddStreamMsg)
}

void AddStreamMsg::InitAsDefaultInstance() {
}

AddStreamMsg::AddStreamMsg(const AddStreamMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AddStreamMsg)
}

void AddStreamMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  streamid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddStreamMsg::~AddStreamMsg() {
  // @@protoc_insertion_point(destructor:AddStreamMsg)
  SharedDtor();
}

void AddStreamMsg::SharedDtor() {
  streamid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void AddStreamMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddStreamMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddStreamMsg_descriptor_;
}

const AddStreamMsg& AddStreamMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IMSMessage_2eproto();
  return *default_instance_;
}

AddStreamMsg* AddStreamMsg::default_instance_ = NULL;

AddStreamMsg* AddStreamMsg::New(::google::protobuf::Arena* arena) const {
  AddStreamMsg* n = new AddStreamMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddStreamMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:AddStreamMsg)
  if (has_streamid()) {
    streamid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  rtmpsinkip_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool AddStreamMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AddStreamMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string streamId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_streamid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->streamid().data(), this->streamid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "AddStreamMsg.streamId");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_rtmpSinkIP;
        break;
      }

      // repeated string rtmpSinkIP = 2;
      case 2: {
        if (tag == 18) {
         parse_rtmpSinkIP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_rtmpsinkip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rtmpsinkip(this->rtmpsinkip_size() - 1).data(),
            this->rtmpsinkip(this->rtmpsinkip_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "AddStreamMsg.rtmpSinkIP");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_rtmpSinkIP;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AddStreamMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AddStreamMsg)
  return false;
#undef DO_
}

void AddStreamMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AddStreamMsg)
  // optional string streamId = 1;
  if (has_streamid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->streamid().data(), this->streamid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "AddStreamMsg.streamId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->streamid(), output);
  }

  // repeated string rtmpSinkIP = 2;
  for (int i = 0; i < this->rtmpsinkip_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rtmpsinkip(i).data(), this->rtmpsinkip(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "AddStreamMsg.rtmpSinkIP");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->rtmpsinkip(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AddStreamMsg)
}

::google::protobuf::uint8* AddStreamMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AddStreamMsg)
  // optional string streamId = 1;
  if (has_streamid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->streamid().data(), this->streamid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "AddStreamMsg.streamId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->streamid(), target);
  }

  // repeated string rtmpSinkIP = 2;
  for (int i = 0; i < this->rtmpsinkip_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rtmpsinkip(i).data(), this->rtmpsinkip(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "AddStreamMsg.rtmpSinkIP");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->rtmpsinkip(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AddStreamMsg)
  return target;
}

int AddStreamMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AddStreamMsg)
  int total_size = 0;

  // optional string streamId = 1;
  if (has_streamid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->streamid());
  }

  // repeated string rtmpSinkIP = 2;
  total_size += 1 * this->rtmpsinkip_size();
  for (int i = 0; i < this->rtmpsinkip_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->rtmpsinkip(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddStreamMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AddStreamMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AddStreamMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AddStreamMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AddStreamMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AddStreamMsg)
    MergeFrom(*source);
  }
}

void AddStreamMsg::MergeFrom(const AddStreamMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AddStreamMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  rtmpsinkip_.MergeFrom(from.rtmpsinkip_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_streamid()) {
      set_has_streamid();
      streamid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.streamid_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void AddStreamMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AddStreamMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddStreamMsg::CopyFrom(const AddStreamMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AddStreamMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddStreamMsg::IsInitialized() const {

  return true;
}

void AddStreamMsg::Swap(AddStreamMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddStreamMsg::InternalSwap(AddStreamMsg* other) {
  streamid_.Swap(&other->streamid_);
  rtmpsinkip_.UnsafeArenaSwap(&other->rtmpsinkip_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddStreamMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddStreamMsg_descriptor_;
  metadata.reflection = AddStreamMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AddStreamMsg

// optional string streamId = 1;
bool AddStreamMsg::has_streamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AddStreamMsg::set_has_streamid() {
  _has_bits_[0] |= 0x00000001u;
}
void AddStreamMsg::clear_has_streamid() {
  _has_bits_[0] &= ~0x00000001u;
}
void AddStreamMsg::clear_streamid() {
  streamid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_streamid();
}
 const ::std::string& AddStreamMsg::streamid() const {
  // @@protoc_insertion_point(field_get:AddStreamMsg.streamId)
  return streamid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AddStreamMsg::set_streamid(const ::std::string& value) {
  set_has_streamid();
  streamid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AddStreamMsg.streamId)
}
 void AddStreamMsg::set_streamid(const char* value) {
  set_has_streamid();
  streamid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AddStreamMsg.streamId)
}
 void AddStreamMsg::set_streamid(const char* value, size_t size) {
  set_has_streamid();
  streamid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AddStreamMsg.streamId)
}
 ::std::string* AddStreamMsg::mutable_streamid() {
  set_has_streamid();
  // @@protoc_insertion_point(field_mutable:AddStreamMsg.streamId)
  return streamid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AddStreamMsg::release_streamid() {
  // @@protoc_insertion_point(field_release:AddStreamMsg.streamId)
  clear_has_streamid();
  return streamid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AddStreamMsg::set_allocated_streamid(::std::string* streamid) {
  if (streamid != NULL) {
    set_has_streamid();
  } else {
    clear_has_streamid();
  }
  streamid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), streamid);
  // @@protoc_insertion_point(field_set_allocated:AddStreamMsg.streamId)
}

// repeated string rtmpSinkIP = 2;
int AddStreamMsg::rtmpsinkip_size() const {
  return rtmpsinkip_.size();
}
void AddStreamMsg::clear_rtmpsinkip() {
  rtmpsinkip_.Clear();
}
 const ::std::string& AddStreamMsg::rtmpsinkip(int index) const {
  // @@protoc_insertion_point(field_get:AddStreamMsg.rtmpSinkIP)
  return rtmpsinkip_.Get(index);
}
 ::std::string* AddStreamMsg::mutable_rtmpsinkip(int index) {
  // @@protoc_insertion_point(field_mutable:AddStreamMsg.rtmpSinkIP)
  return rtmpsinkip_.Mutable(index);
}
 void AddStreamMsg::set_rtmpsinkip(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:AddStreamMsg.rtmpSinkIP)
  rtmpsinkip_.Mutable(index)->assign(value);
}
 void AddStreamMsg::set_rtmpsinkip(int index, const char* value) {
  rtmpsinkip_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:AddStreamMsg.rtmpSinkIP)
}
 void AddStreamMsg::set_rtmpsinkip(int index, const char* value, size_t size) {
  rtmpsinkip_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AddStreamMsg.rtmpSinkIP)
}
 ::std::string* AddStreamMsg::add_rtmpsinkip() {
  // @@protoc_insertion_point(field_add_mutable:AddStreamMsg.rtmpSinkIP)
  return rtmpsinkip_.Add();
}
 void AddStreamMsg::add_rtmpsinkip(const ::std::string& value) {
  rtmpsinkip_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:AddStreamMsg.rtmpSinkIP)
}
 void AddStreamMsg::add_rtmpsinkip(const char* value) {
  rtmpsinkip_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:AddStreamMsg.rtmpSinkIP)
}
 void AddStreamMsg::add_rtmpsinkip(const char* value, size_t size) {
  rtmpsinkip_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:AddStreamMsg.rtmpSinkIP)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
AddStreamMsg::rtmpsinkip() const {
  // @@protoc_insertion_point(field_list:AddStreamMsg.rtmpSinkIP)
  return rtmpsinkip_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
AddStreamMsg::mutable_rtmpsinkip() {
  // @@protoc_insertion_point(field_mutable_list:AddStreamMsg.rtmpSinkIP)
  return &rtmpsinkip_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DelStreamMsg::kStreamIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DelStreamMsg::DelStreamMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DelStreamMsg)
}

void DelStreamMsg::InitAsDefaultInstance() {
}

DelStreamMsg::DelStreamMsg(const DelStreamMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DelStreamMsg)
}

void DelStreamMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  streamid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DelStreamMsg::~DelStreamMsg() {
  // @@protoc_insertion_point(destructor:DelStreamMsg)
  SharedDtor();
}

void DelStreamMsg::SharedDtor() {
  streamid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void DelStreamMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelStreamMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DelStreamMsg_descriptor_;
}

const DelStreamMsg& DelStreamMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IMSMessage_2eproto();
  return *default_instance_;
}

DelStreamMsg* DelStreamMsg::default_instance_ = NULL;

DelStreamMsg* DelStreamMsg::New(::google::protobuf::Arena* arena) const {
  DelStreamMsg* n = new DelStreamMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DelStreamMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:DelStreamMsg)
  if (has_streamid()) {
    streamid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DelStreamMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DelStreamMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string streamId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_streamid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->streamid().data(), this->streamid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DelStreamMsg.streamId");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DelStreamMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DelStreamMsg)
  return false;
#undef DO_
}

void DelStreamMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DelStreamMsg)
  // optional string streamId = 1;
  if (has_streamid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->streamid().data(), this->streamid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DelStreamMsg.streamId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->streamid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DelStreamMsg)
}

::google::protobuf::uint8* DelStreamMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DelStreamMsg)
  // optional string streamId = 1;
  if (has_streamid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->streamid().data(), this->streamid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DelStreamMsg.streamId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->streamid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DelStreamMsg)
  return target;
}

int DelStreamMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:DelStreamMsg)
  int total_size = 0;

  // optional string streamId = 1;
  if (has_streamid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->streamid());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelStreamMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DelStreamMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DelStreamMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DelStreamMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DelStreamMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DelStreamMsg)
    MergeFrom(*source);
  }
}

void DelStreamMsg::MergeFrom(const DelStreamMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DelStreamMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_streamid()) {
      set_has_streamid();
      streamid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.streamid_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DelStreamMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DelStreamMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelStreamMsg::CopyFrom(const DelStreamMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DelStreamMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelStreamMsg::IsInitialized() const {

  return true;
}

void DelStreamMsg::Swap(DelStreamMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DelStreamMsg::InternalSwap(DelStreamMsg* other) {
  streamid_.Swap(&other->streamid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DelStreamMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DelStreamMsg_descriptor_;
  metadata.reflection = DelStreamMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DelStreamMsg

// optional string streamId = 1;
bool DelStreamMsg::has_streamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DelStreamMsg::set_has_streamid() {
  _has_bits_[0] |= 0x00000001u;
}
void DelStreamMsg::clear_has_streamid() {
  _has_bits_[0] &= ~0x00000001u;
}
void DelStreamMsg::clear_streamid() {
  streamid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_streamid();
}
 const ::std::string& DelStreamMsg::streamid() const {
  // @@protoc_insertion_point(field_get:DelStreamMsg.streamId)
  return streamid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DelStreamMsg::set_streamid(const ::std::string& value) {
  set_has_streamid();
  streamid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DelStreamMsg.streamId)
}
 void DelStreamMsg::set_streamid(const char* value) {
  set_has_streamid();
  streamid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DelStreamMsg.streamId)
}
 void DelStreamMsg::set_streamid(const char* value, size_t size) {
  set_has_streamid();
  streamid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DelStreamMsg.streamId)
}
 ::std::string* DelStreamMsg::mutable_streamid() {
  set_has_streamid();
  // @@protoc_insertion_point(field_mutable:DelStreamMsg.streamId)
  return streamid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DelStreamMsg::release_streamid() {
  // @@protoc_insertion_point(field_release:DelStreamMsg.streamId)
  clear_has_streamid();
  return streamid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DelStreamMsg::set_allocated_streamid(::std::string* streamid) {
  if (streamid != NULL) {
    set_has_streamid();
  } else {
    clear_has_streamid();
  }
  streamid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), streamid);
  // @@protoc_insertion_point(field_set_allocated:DelStreamMsg.streamId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamEndMsg::kStreamIdFieldNumber;
const int StreamEndMsg::kRtmpSinkIPFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamEndMsg::StreamEndMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:StreamEndMsg)
}

void StreamEndMsg::InitAsDefaultInstance() {
}

StreamEndMsg::StreamEndMsg(const StreamEndMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:StreamEndMsg)
}

void StreamEndMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  streamid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rtmpsinkip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StreamEndMsg::~StreamEndMsg() {
  // @@protoc_insertion_point(destructor:StreamEndMsg)
  SharedDtor();
}

void StreamEndMsg::SharedDtor() {
  streamid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rtmpsinkip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void StreamEndMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamEndMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamEndMsg_descriptor_;
}

const StreamEndMsg& StreamEndMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IMSMessage_2eproto();
  return *default_instance_;
}

StreamEndMsg* StreamEndMsg::default_instance_ = NULL;

StreamEndMsg* StreamEndMsg::New(::google::protobuf::Arena* arena) const {
  StreamEndMsg* n = new StreamEndMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StreamEndMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:StreamEndMsg)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_streamid()) {
      streamid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_rtmpsinkip()) {
      rtmpsinkip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StreamEndMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:StreamEndMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string streamId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_streamid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->streamid().data(), this->streamid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "StreamEndMsg.streamId");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_rtmpSinkIP;
        break;
      }

      // optional string rtmpSinkIP = 2;
      case 2: {
        if (tag == 18) {
         parse_rtmpSinkIP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rtmpsinkip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rtmpsinkip().data(), this->rtmpsinkip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "StreamEndMsg.rtmpSinkIP");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:StreamEndMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:StreamEndMsg)
  return false;
#undef DO_
}

void StreamEndMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:StreamEndMsg)
  // optional string streamId = 1;
  if (has_streamid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->streamid().data(), this->streamid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "StreamEndMsg.streamId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->streamid(), output);
  }

  // optional string rtmpSinkIP = 2;
  if (has_rtmpsinkip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rtmpsinkip().data(), this->rtmpsinkip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "StreamEndMsg.rtmpSinkIP");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->rtmpsinkip(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:StreamEndMsg)
}

::google::protobuf::uint8* StreamEndMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:StreamEndMsg)
  // optional string streamId = 1;
  if (has_streamid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->streamid().data(), this->streamid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "StreamEndMsg.streamId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->streamid(), target);
  }

  // optional string rtmpSinkIP = 2;
  if (has_rtmpsinkip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rtmpsinkip().data(), this->rtmpsinkip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "StreamEndMsg.rtmpSinkIP");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rtmpsinkip(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StreamEndMsg)
  return target;
}

int StreamEndMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:StreamEndMsg)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string streamId = 1;
    if (has_streamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->streamid());
    }

    // optional string rtmpSinkIP = 2;
    if (has_rtmpsinkip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rtmpsinkip());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamEndMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:StreamEndMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const StreamEndMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StreamEndMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:StreamEndMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:StreamEndMsg)
    MergeFrom(*source);
  }
}

void StreamEndMsg::MergeFrom(const StreamEndMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StreamEndMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_streamid()) {
      set_has_streamid();
      streamid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.streamid_);
    }
    if (from.has_rtmpsinkip()) {
      set_has_rtmpsinkip();
      rtmpsinkip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rtmpsinkip_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void StreamEndMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:StreamEndMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamEndMsg::CopyFrom(const StreamEndMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StreamEndMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamEndMsg::IsInitialized() const {

  return true;
}

void StreamEndMsg::Swap(StreamEndMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StreamEndMsg::InternalSwap(StreamEndMsg* other) {
  streamid_.Swap(&other->streamid_);
  rtmpsinkip_.Swap(&other->rtmpsinkip_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StreamEndMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StreamEndMsg_descriptor_;
  metadata.reflection = StreamEndMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StreamEndMsg

// optional string streamId = 1;
bool StreamEndMsg::has_streamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StreamEndMsg::set_has_streamid() {
  _has_bits_[0] |= 0x00000001u;
}
void StreamEndMsg::clear_has_streamid() {
  _has_bits_[0] &= ~0x00000001u;
}
void StreamEndMsg::clear_streamid() {
  streamid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_streamid();
}
 const ::std::string& StreamEndMsg::streamid() const {
  // @@protoc_insertion_point(field_get:StreamEndMsg.streamId)
  return streamid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StreamEndMsg::set_streamid(const ::std::string& value) {
  set_has_streamid();
  streamid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StreamEndMsg.streamId)
}
 void StreamEndMsg::set_streamid(const char* value) {
  set_has_streamid();
  streamid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StreamEndMsg.streamId)
}
 void StreamEndMsg::set_streamid(const char* value, size_t size) {
  set_has_streamid();
  streamid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StreamEndMsg.streamId)
}
 ::std::string* StreamEndMsg::mutable_streamid() {
  set_has_streamid();
  // @@protoc_insertion_point(field_mutable:StreamEndMsg.streamId)
  return streamid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StreamEndMsg::release_streamid() {
  // @@protoc_insertion_point(field_release:StreamEndMsg.streamId)
  clear_has_streamid();
  return streamid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StreamEndMsg::set_allocated_streamid(::std::string* streamid) {
  if (streamid != NULL) {
    set_has_streamid();
  } else {
    clear_has_streamid();
  }
  streamid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), streamid);
  // @@protoc_insertion_point(field_set_allocated:StreamEndMsg.streamId)
}

// optional string rtmpSinkIP = 2;
bool StreamEndMsg::has_rtmpsinkip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StreamEndMsg::set_has_rtmpsinkip() {
  _has_bits_[0] |= 0x00000002u;
}
void StreamEndMsg::clear_has_rtmpsinkip() {
  _has_bits_[0] &= ~0x00000002u;
}
void StreamEndMsg::clear_rtmpsinkip() {
  rtmpsinkip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rtmpsinkip();
}
 const ::std::string& StreamEndMsg::rtmpsinkip() const {
  // @@protoc_insertion_point(field_get:StreamEndMsg.rtmpSinkIP)
  return rtmpsinkip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StreamEndMsg::set_rtmpsinkip(const ::std::string& value) {
  set_has_rtmpsinkip();
  rtmpsinkip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StreamEndMsg.rtmpSinkIP)
}
 void StreamEndMsg::set_rtmpsinkip(const char* value) {
  set_has_rtmpsinkip();
  rtmpsinkip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StreamEndMsg.rtmpSinkIP)
}
 void StreamEndMsg::set_rtmpsinkip(const char* value, size_t size) {
  set_has_rtmpsinkip();
  rtmpsinkip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StreamEndMsg.rtmpSinkIP)
}
 ::std::string* StreamEndMsg::mutable_rtmpsinkip() {
  set_has_rtmpsinkip();
  // @@protoc_insertion_point(field_mutable:StreamEndMsg.rtmpSinkIP)
  return rtmpsinkip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StreamEndMsg::release_rtmpsinkip() {
  // @@protoc_insertion_point(field_release:StreamEndMsg.rtmpSinkIP)
  clear_has_rtmpsinkip();
  return rtmpsinkip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StreamEndMsg::set_allocated_rtmpsinkip(::std::string* rtmpsinkip) {
  if (rtmpsinkip != NULL) {
    set_has_rtmpsinkip();
  } else {
    clear_has_rtmpsinkip();
  }
  rtmpsinkip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rtmpsinkip);
  // @@protoc_insertion_point(field_set_allocated:StreamEndMsg.rtmpSinkIP)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamClientsCount::kStreamIdFieldNumber;
const int StreamClientsCount::kNumClientsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamClientsCount::StreamClientsCount()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:StreamClientsCount)
}

void StreamClientsCount::InitAsDefaultInstance() {
}

StreamClientsCount::StreamClientsCount(const StreamClientsCount& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:StreamClientsCount)
}

void StreamClientsCount::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  streamid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  numclients_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StreamClientsCount::~StreamClientsCount() {
  // @@protoc_insertion_point(destructor:StreamClientsCount)
  SharedDtor();
}

void StreamClientsCount::SharedDtor() {
  streamid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void StreamClientsCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamClientsCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamClientsCount_descriptor_;
}

const StreamClientsCount& StreamClientsCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IMSMessage_2eproto();
  return *default_instance_;
}

StreamClientsCount* StreamClientsCount::default_instance_ = NULL;

StreamClientsCount* StreamClientsCount::New(::google::protobuf::Arena* arena) const {
  StreamClientsCount* n = new StreamClientsCount;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StreamClientsCount::Clear() {
// @@protoc_insertion_point(message_clear_start:StreamClientsCount)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_streamid()) {
      streamid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    numclients_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StreamClientsCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:StreamClientsCount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string streamId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_streamid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->streamid().data(), this->streamid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "StreamClientsCount.streamId");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_numClients;
        break;
      }

      // optional int32 numClients = 2;
      case 2: {
        if (tag == 16) {
         parse_numClients:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numclients_)));
          set_has_numclients();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:StreamClientsCount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:StreamClientsCount)
  return false;
#undef DO_
}

void StreamClientsCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:StreamClientsCount)
  // optional string streamId = 1;
  if (has_streamid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->streamid().data(), this->streamid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "StreamClientsCount.streamId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->streamid(), output);
  }

  // optional int32 numClients = 2;
  if (has_numclients()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->numclients(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:StreamClientsCount)
}

::google::protobuf::uint8* StreamClientsCount::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:StreamClientsCount)
  // optional string streamId = 1;
  if (has_streamid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->streamid().data(), this->streamid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "StreamClientsCount.streamId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->streamid(), target);
  }

  // optional int32 numClients = 2;
  if (has_numclients()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->numclients(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StreamClientsCount)
  return target;
}

int StreamClientsCount::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:StreamClientsCount)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string streamId = 1;
    if (has_streamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->streamid());
    }

    // optional int32 numClients = 2;
    if (has_numclients()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numclients());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamClientsCount::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:StreamClientsCount)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const StreamClientsCount* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StreamClientsCount>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:StreamClientsCount)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:StreamClientsCount)
    MergeFrom(*source);
  }
}

void StreamClientsCount::MergeFrom(const StreamClientsCount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StreamClientsCount)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_streamid()) {
      set_has_streamid();
      streamid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.streamid_);
    }
    if (from.has_numclients()) {
      set_numclients(from.numclients());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void StreamClientsCount::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:StreamClientsCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamClientsCount::CopyFrom(const StreamClientsCount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StreamClientsCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamClientsCount::IsInitialized() const {

  return true;
}

void StreamClientsCount::Swap(StreamClientsCount* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StreamClientsCount::InternalSwap(StreamClientsCount* other) {
  streamid_.Swap(&other->streamid_);
  std::swap(numclients_, other->numclients_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StreamClientsCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StreamClientsCount_descriptor_;
  metadata.reflection = StreamClientsCount_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StreamClientsCount

// optional string streamId = 1;
bool StreamClientsCount::has_streamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StreamClientsCount::set_has_streamid() {
  _has_bits_[0] |= 0x00000001u;
}
void StreamClientsCount::clear_has_streamid() {
  _has_bits_[0] &= ~0x00000001u;
}
void StreamClientsCount::clear_streamid() {
  streamid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_streamid();
}
 const ::std::string& StreamClientsCount::streamid() const {
  // @@protoc_insertion_point(field_get:StreamClientsCount.streamId)
  return streamid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StreamClientsCount::set_streamid(const ::std::string& value) {
  set_has_streamid();
  streamid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StreamClientsCount.streamId)
}
 void StreamClientsCount::set_streamid(const char* value) {
  set_has_streamid();
  streamid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StreamClientsCount.streamId)
}
 void StreamClientsCount::set_streamid(const char* value, size_t size) {
  set_has_streamid();
  streamid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StreamClientsCount.streamId)
}
 ::std::string* StreamClientsCount::mutable_streamid() {
  set_has_streamid();
  // @@protoc_insertion_point(field_mutable:StreamClientsCount.streamId)
  return streamid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StreamClientsCount::release_streamid() {
  // @@protoc_insertion_point(field_release:StreamClientsCount.streamId)
  clear_has_streamid();
  return streamid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StreamClientsCount::set_allocated_streamid(::std::string* streamid) {
  if (streamid != NULL) {
    set_has_streamid();
  } else {
    clear_has_streamid();
  }
  streamid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), streamid);
  // @@protoc_insertion_point(field_set_allocated:StreamClientsCount.streamId)
}

// optional int32 numClients = 2;
bool StreamClientsCount::has_numclients() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StreamClientsCount::set_has_numclients() {
  _has_bits_[0] |= 0x00000002u;
}
void StreamClientsCount::clear_has_numclients() {
  _has_bits_[0] &= ~0x00000002u;
}
void StreamClientsCount::clear_numclients() {
  numclients_ = 0;
  clear_has_numclients();
}
 ::google::protobuf::int32 StreamClientsCount::numclients() const {
  // @@protoc_insertion_point(field_get:StreamClientsCount.numClients)
  return numclients_;
}
 void StreamClientsCount::set_numclients(::google::protobuf::int32 value) {
  set_has_numclients();
  numclients_ = value;
  // @@protoc_insertion_point(field_set:StreamClientsCount.numClients)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NumClientsReplyMsg::kStreamclientsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NumClientsReplyMsg::NumClientsReplyMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NumClientsReplyMsg)
}

void NumClientsReplyMsg::InitAsDefaultInstance() {
}

NumClientsReplyMsg::NumClientsReplyMsg(const NumClientsReplyMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NumClientsReplyMsg)
}

void NumClientsReplyMsg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NumClientsReplyMsg::~NumClientsReplyMsg() {
  // @@protoc_insertion_point(destructor:NumClientsReplyMsg)
  SharedDtor();
}

void NumClientsReplyMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NumClientsReplyMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NumClientsReplyMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NumClientsReplyMsg_descriptor_;
}

const NumClientsReplyMsg& NumClientsReplyMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IMSMessage_2eproto();
  return *default_instance_;
}

NumClientsReplyMsg* NumClientsReplyMsg::default_instance_ = NULL;

NumClientsReplyMsg* NumClientsReplyMsg::New(::google::protobuf::Arena* arena) const {
  NumClientsReplyMsg* n = new NumClientsReplyMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NumClientsReplyMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:NumClientsReplyMsg)
  streamclients_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NumClientsReplyMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NumClientsReplyMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .StreamClientsCount streamclients = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_streamclients:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_streamclients()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_streamclients;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NumClientsReplyMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NumClientsReplyMsg)
  return false;
#undef DO_
}

void NumClientsReplyMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NumClientsReplyMsg)
  // repeated .StreamClientsCount streamclients = 1;
  for (unsigned int i = 0, n = this->streamclients_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->streamclients(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NumClientsReplyMsg)
}

::google::protobuf::uint8* NumClientsReplyMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NumClientsReplyMsg)
  // repeated .StreamClientsCount streamclients = 1;
  for (unsigned int i = 0, n = this->streamclients_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->streamclients(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NumClientsReplyMsg)
  return target;
}

int NumClientsReplyMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:NumClientsReplyMsg)
  int total_size = 0;

  // repeated .StreamClientsCount streamclients = 1;
  total_size += 1 * this->streamclients_size();
  for (int i = 0; i < this->streamclients_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->streamclients(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NumClientsReplyMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NumClientsReplyMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NumClientsReplyMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NumClientsReplyMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NumClientsReplyMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NumClientsReplyMsg)
    MergeFrom(*source);
  }
}

void NumClientsReplyMsg::MergeFrom(const NumClientsReplyMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NumClientsReplyMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  streamclients_.MergeFrom(from.streamclients_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void NumClientsReplyMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NumClientsReplyMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NumClientsReplyMsg::CopyFrom(const NumClientsReplyMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NumClientsReplyMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NumClientsReplyMsg::IsInitialized() const {

  return true;
}

void NumClientsReplyMsg::Swap(NumClientsReplyMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NumClientsReplyMsg::InternalSwap(NumClientsReplyMsg* other) {
  streamclients_.UnsafeArenaSwap(&other->streamclients_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NumClientsReplyMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NumClientsReplyMsg_descriptor_;
  metadata.reflection = NumClientsReplyMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NumClientsReplyMsg

// repeated .StreamClientsCount streamclients = 1;
int NumClientsReplyMsg::streamclients_size() const {
  return streamclients_.size();
}
void NumClientsReplyMsg::clear_streamclients() {
  streamclients_.Clear();
}
const ::StreamClientsCount& NumClientsReplyMsg::streamclients(int index) const {
  // @@protoc_insertion_point(field_get:NumClientsReplyMsg.streamclients)
  return streamclients_.Get(index);
}
::StreamClientsCount* NumClientsReplyMsg::mutable_streamclients(int index) {
  // @@protoc_insertion_point(field_mutable:NumClientsReplyMsg.streamclients)
  return streamclients_.Mutable(index);
}
::StreamClientsCount* NumClientsReplyMsg::add_streamclients() {
  // @@protoc_insertion_point(field_add:NumClientsReplyMsg.streamclients)
  return streamclients_.Add();
}
::google::protobuf::RepeatedPtrField< ::StreamClientsCount >*
NumClientsReplyMsg::mutable_streamclients() {
  // @@protoc_insertion_point(field_mutable_list:NumClientsReplyMsg.streamclients)
  return &streamclients_;
}
const ::google::protobuf::RepeatedPtrField< ::StreamClientsCount >&
NumClientsReplyMsg::streamclients() const {
  // @@protoc_insertion_point(field_list:NumClientsReplyMsg.streamclients)
  return streamclients_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NewStreamMsg::kStreamIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NewStreamMsg::NewStreamMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NewStreamMsg)
}

void NewStreamMsg::InitAsDefaultInstance() {
}

NewStreamMsg::NewStreamMsg(const NewStreamMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NewStreamMsg)
}

void NewStreamMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  streamid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewStreamMsg::~NewStreamMsg() {
  // @@protoc_insertion_point(destructor:NewStreamMsg)
  SharedDtor();
}

void NewStreamMsg::SharedDtor() {
  streamid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void NewStreamMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewStreamMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewStreamMsg_descriptor_;
}

const NewStreamMsg& NewStreamMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IMSMessage_2eproto();
  return *default_instance_;
}

NewStreamMsg* NewStreamMsg::default_instance_ = NULL;

NewStreamMsg* NewStreamMsg::New(::google::protobuf::Arena* arena) const {
  NewStreamMsg* n = new NewStreamMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NewStreamMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:NewStreamMsg)
  if (has_streamid()) {
    streamid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NewStreamMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NewStreamMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string streamId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_streamid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->streamid().data(), this->streamid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NewStreamMsg.streamId");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NewStreamMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NewStreamMsg)
  return false;
#undef DO_
}

void NewStreamMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NewStreamMsg)
  // optional string streamId = 1;
  if (has_streamid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->streamid().data(), this->streamid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NewStreamMsg.streamId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->streamid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NewStreamMsg)
}

::google::protobuf::uint8* NewStreamMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NewStreamMsg)
  // optional string streamId = 1;
  if (has_streamid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->streamid().data(), this->streamid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NewStreamMsg.streamId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->streamid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NewStreamMsg)
  return target;
}

int NewStreamMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:NewStreamMsg)
  int total_size = 0;

  // optional string streamId = 1;
  if (has_streamid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->streamid());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewStreamMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NewStreamMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NewStreamMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NewStreamMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NewStreamMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NewStreamMsg)
    MergeFrom(*source);
  }
}

void NewStreamMsg::MergeFrom(const NewStreamMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NewStreamMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_streamid()) {
      set_has_streamid();
      streamid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.streamid_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void NewStreamMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NewStreamMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewStreamMsg::CopyFrom(const NewStreamMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NewStreamMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewStreamMsg::IsInitialized() const {

  return true;
}

void NewStreamMsg::Swap(NewStreamMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NewStreamMsg::InternalSwap(NewStreamMsg* other) {
  streamid_.Swap(&other->streamid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NewStreamMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewStreamMsg_descriptor_;
  metadata.reflection = NewStreamMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NewStreamMsg

// optional string streamId = 1;
bool NewStreamMsg::has_streamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NewStreamMsg::set_has_streamid() {
  _has_bits_[0] |= 0x00000001u;
}
void NewStreamMsg::clear_has_streamid() {
  _has_bits_[0] &= ~0x00000001u;
}
void NewStreamMsg::clear_streamid() {
  streamid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_streamid();
}
 const ::std::string& NewStreamMsg::streamid() const {
  // @@protoc_insertion_point(field_get:NewStreamMsg.streamId)
  return streamid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NewStreamMsg::set_streamid(const ::std::string& value) {
  set_has_streamid();
  streamid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NewStreamMsg.streamId)
}
 void NewStreamMsg::set_streamid(const char* value) {
  set_has_streamid();
  streamid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NewStreamMsg.streamId)
}
 void NewStreamMsg::set_streamid(const char* value, size_t size) {
  set_has_streamid();
  streamid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NewStreamMsg.streamId)
}
 ::std::string* NewStreamMsg::mutable_streamid() {
  set_has_streamid();
  // @@protoc_insertion_point(field_mutable:NewStreamMsg.streamId)
  return streamid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NewStreamMsg::release_streamid() {
  // @@protoc_insertion_point(field_release:NewStreamMsg.streamId)
  clear_has_streamid();
  return streamid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NewStreamMsg::set_allocated_streamid(::std::string* streamid) {
  if (streamid != NULL) {
    set_has_streamid();
  } else {
    clear_has_streamid();
  }
  streamid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), streamid);
  // @@protoc_insertion_point(field_set_allocated:NewStreamMsg.streamId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StopStreamMsg::kStreamIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StopStreamMsg::StopStreamMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:StopStreamMsg)
}

void StopStreamMsg::InitAsDefaultInstance() {
}

StopStreamMsg::StopStreamMsg(const StopStreamMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:StopStreamMsg)
}

void StopStreamMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  streamid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StopStreamMsg::~StopStreamMsg() {
  // @@protoc_insertion_point(destructor:StopStreamMsg)
  SharedDtor();
}

void StopStreamMsg::SharedDtor() {
  streamid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void StopStreamMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StopStreamMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StopStreamMsg_descriptor_;
}

const StopStreamMsg& StopStreamMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IMSMessage_2eproto();
  return *default_instance_;
}

StopStreamMsg* StopStreamMsg::default_instance_ = NULL;

StopStreamMsg* StopStreamMsg::New(::google::protobuf::Arena* arena) const {
  StopStreamMsg* n = new StopStreamMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StopStreamMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:StopStreamMsg)
  if (has_streamid()) {
    streamid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StopStreamMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:StopStreamMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string streamId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_streamid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->streamid().data(), this->streamid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "StopStreamMsg.streamId");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:StopStreamMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:StopStreamMsg)
  return false;
#undef DO_
}

void StopStreamMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:StopStreamMsg)
  // optional string streamId = 1;
  if (has_streamid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->streamid().data(), this->streamid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "StopStreamMsg.streamId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->streamid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:StopStreamMsg)
}

::google::protobuf::uint8* StopStreamMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:StopStreamMsg)
  // optional string streamId = 1;
  if (has_streamid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->streamid().data(), this->streamid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "StopStreamMsg.streamId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->streamid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StopStreamMsg)
  return target;
}

int StopStreamMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:StopStreamMsg)
  int total_size = 0;

  // optional string streamId = 1;
  if (has_streamid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->streamid());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StopStreamMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:StopStreamMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const StopStreamMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StopStreamMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:StopStreamMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:StopStreamMsg)
    MergeFrom(*source);
  }
}

void StopStreamMsg::MergeFrom(const StopStreamMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StopStreamMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_streamid()) {
      set_has_streamid();
      streamid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.streamid_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void StopStreamMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:StopStreamMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopStreamMsg::CopyFrom(const StopStreamMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StopStreamMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopStreamMsg::IsInitialized() const {

  return true;
}

void StopStreamMsg::Swap(StopStreamMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StopStreamMsg::InternalSwap(StopStreamMsg* other) {
  streamid_.Swap(&other->streamid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StopStreamMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StopStreamMsg_descriptor_;
  metadata.reflection = StopStreamMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StopStreamMsg

// optional string streamId = 1;
bool StopStreamMsg::has_streamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StopStreamMsg::set_has_streamid() {
  _has_bits_[0] |= 0x00000001u;
}
void StopStreamMsg::clear_has_streamid() {
  _has_bits_[0] &= ~0x00000001u;
}
void StopStreamMsg::clear_streamid() {
  streamid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_streamid();
}
 const ::std::string& StopStreamMsg::streamid() const {
  // @@protoc_insertion_point(field_get:StopStreamMsg.streamId)
  return streamid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StopStreamMsg::set_streamid(const ::std::string& value) {
  set_has_streamid();
  streamid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StopStreamMsg.streamId)
}
 void StopStreamMsg::set_streamid(const char* value) {
  set_has_streamid();
  streamid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StopStreamMsg.streamId)
}
 void StopStreamMsg::set_streamid(const char* value, size_t size) {
  set_has_streamid();
  streamid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StopStreamMsg.streamId)
}
 ::std::string* StopStreamMsg::mutable_streamid() {
  set_has_streamid();
  // @@protoc_insertion_point(field_mutable:StopStreamMsg.streamId)
  return streamid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StopStreamMsg::release_streamid() {
  // @@protoc_insertion_point(field_release:StopStreamMsg.streamId)
  clear_has_streamid();
  return streamid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StopStreamMsg::set_allocated_streamid(::std::string* streamid) {
  if (streamid != NULL) {
    set_has_streamid();
  } else {
    clear_has_streamid();
  }
  streamid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), streamid);
  // @@protoc_insertion_point(field_set_allocated:StopStreamMsg.streamId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMSMessage::kSeqNoFieldNumber;
const int IMSMessage::kCmdFieldNumber;
const int IMSMessage::kAddStreamFieldNumber;
const int IMSMessage::kDelStreamFieldNumber;
const int IMSMessage::kStreamEndFieldNumber;
const int IMSMessage::kNumClientsRepliesFieldNumber;
const int IMSMessage::kNewStreamFieldNumber;
const int IMSMessage::kStopStreamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMSMessage::IMSMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IMSMessage)
}

void IMSMessage::InitAsDefaultInstance() {
  addstream_ = const_cast< ::AddStreamMsg*>(&::AddStreamMsg::default_instance());
  delstream_ = const_cast< ::DelStreamMsg*>(&::DelStreamMsg::default_instance());
  streamend_ = const_cast< ::StreamEndMsg*>(&::StreamEndMsg::default_instance());
  numclientsreplies_ = const_cast< ::NumClientsReplyMsg*>(&::NumClientsReplyMsg::default_instance());
  newstream_ = const_cast< ::NewStreamMsg*>(&::NewStreamMsg::default_instance());
  stopstream_ = const_cast< ::StopStreamMsg*>(&::StopStreamMsg::default_instance());
}

IMSMessage::IMSMessage(const IMSMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IMSMessage)
}

void IMSMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  seqno_ = GOOGLE_LONGLONG(0);
  cmd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  addstream_ = NULL;
  delstream_ = NULL;
  streamend_ = NULL;
  numclientsreplies_ = NULL;
  newstream_ = NULL;
  stopstream_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMSMessage::~IMSMessage() {
  // @@protoc_insertion_point(destructor:IMSMessage)
  SharedDtor();
}

void IMSMessage::SharedDtor() {
  cmd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete addstream_;
    delete delstream_;
    delete streamend_;
    delete numclientsreplies_;
    delete newstream_;
    delete stopstream_;
  }
}

void IMSMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IMSMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IMSMessage_descriptor_;
}

const IMSMessage& IMSMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IMSMessage_2eproto();
  return *default_instance_;
}

IMSMessage* IMSMessage::default_instance_ = NULL;

IMSMessage* IMSMessage::New(::google::protobuf::Arena* arena) const {
  IMSMessage* n = new IMSMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMSMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:IMSMessage)
  if (_has_bits_[0 / 32] & 255u) {
    seqno_ = GOOGLE_LONGLONG(0);
    if (has_cmd()) {
      cmd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_addstream()) {
      if (addstream_ != NULL) addstream_->::AddStreamMsg::Clear();
    }
    if (has_delstream()) {
      if (delstream_ != NULL) delstream_->::DelStreamMsg::Clear();
    }
    if (has_streamend()) {
      if (streamend_ != NULL) streamend_->::StreamEndMsg::Clear();
    }
    if (has_numclientsreplies()) {
      if (numclientsreplies_ != NULL) numclientsreplies_->::NumClientsReplyMsg::Clear();
    }
    if (has_newstream()) {
      if (newstream_ != NULL) newstream_->::NewStreamMsg::Clear();
    }
    if (has_stopstream()) {
      if (stopstream_ != NULL) stopstream_->::StopStreamMsg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool IMSMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IMSMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 seqNo = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cmd;
        break;
      }

      // optional string cmd = 2;
      case 2: {
        if (tag == 18) {
         parse_cmd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cmd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cmd().data(), this->cmd().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "IMSMessage.cmd");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_addStream;
        break;
      }

      // optional .AddStreamMsg addStream = 3;
      case 3: {
        if (tag == 26) {
         parse_addStream:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_addstream()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_delStream;
        break;
      }

      // optional .DelStreamMsg delStream = 4;
      case 4: {
        if (tag == 34) {
         parse_delStream:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_delstream()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_streamEnd;
        break;
      }

      // optional .StreamEndMsg streamEnd = 5;
      case 5: {
        if (tag == 42) {
         parse_streamEnd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_streamend()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_NumClientsReplies;
        break;
      }

      // optional .NumClientsReplyMsg NumClientsReplies = 6;
      case 6: {
        if (tag == 50) {
         parse_NumClientsReplies:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_numclientsreplies()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_newStream;
        break;
      }

      // optional .NewStreamMsg newStream = 7;
      case 7: {
        if (tag == 58) {
         parse_newStream:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_newstream()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_stopStream;
        break;
      }

      // optional .StopStreamMsg stopStream = 8;
      case 8: {
        if (tag == 66) {
         parse_stopStream:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stopstream()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IMSMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IMSMessage)
  return false;
#undef DO_
}

void IMSMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IMSMessage)
  // optional int64 seqNo = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->seqno(), output);
  }

  // optional string cmd = 2;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cmd().data(), this->cmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "IMSMessage.cmd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cmd(), output);
  }

  // optional .AddStreamMsg addStream = 3;
  if (has_addstream()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->addstream_, output);
  }

  // optional .DelStreamMsg delStream = 4;
  if (has_delstream()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->delstream_, output);
  }

  // optional .StreamEndMsg streamEnd = 5;
  if (has_streamend()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->streamend_, output);
  }

  // optional .NumClientsReplyMsg NumClientsReplies = 6;
  if (has_numclientsreplies()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->numclientsreplies_, output);
  }

  // optional .NewStreamMsg newStream = 7;
  if (has_newstream()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->newstream_, output);
  }

  // optional .StopStreamMsg stopStream = 8;
  if (has_stopstream()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->stopstream_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IMSMessage)
}

::google::protobuf::uint8* IMSMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:IMSMessage)
  // optional int64 seqNo = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->seqno(), target);
  }

  // optional string cmd = 2;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cmd().data(), this->cmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "IMSMessage.cmd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cmd(), target);
  }

  // optional .AddStreamMsg addStream = 3;
  if (has_addstream()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->addstream_, false, target);
  }

  // optional .DelStreamMsg delStream = 4;
  if (has_delstream()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->delstream_, false, target);
  }

  // optional .StreamEndMsg streamEnd = 5;
  if (has_streamend()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->streamend_, false, target);
  }

  // optional .NumClientsReplyMsg NumClientsReplies = 6;
  if (has_numclientsreplies()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->numclientsreplies_, false, target);
  }

  // optional .NewStreamMsg newStream = 7;
  if (has_newstream()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->newstream_, false, target);
  }

  // optional .StopStreamMsg stopStream = 8;
  if (has_stopstream()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->stopstream_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IMSMessage)
  return target;
}

int IMSMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:IMSMessage)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional int64 seqNo = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->seqno());
    }

    // optional string cmd = 2;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cmd());
    }

    // optional .AddStreamMsg addStream = 3;
    if (has_addstream()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->addstream_);
    }

    // optional .DelStreamMsg delStream = 4;
    if (has_delstream()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->delstream_);
    }

    // optional .StreamEndMsg streamEnd = 5;
    if (has_streamend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->streamend_);
    }

    // optional .NumClientsReplyMsg NumClientsReplies = 6;
    if (has_numclientsreplies()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->numclientsreplies_);
    }

    // optional .NewStreamMsg newStream = 7;
    if (has_newstream()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->newstream_);
    }

    // optional .StopStreamMsg stopStream = 8;
    if (has_stopstream()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->stopstream_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMSMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IMSMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const IMSMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const IMSMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IMSMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IMSMessage)
    MergeFrom(*source);
  }
}

void IMSMessage::MergeFrom(const IMSMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IMSMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_cmd()) {
      set_has_cmd();
      cmd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cmd_);
    }
    if (from.has_addstream()) {
      mutable_addstream()->::AddStreamMsg::MergeFrom(from.addstream());
    }
    if (from.has_delstream()) {
      mutable_delstream()->::DelStreamMsg::MergeFrom(from.delstream());
    }
    if (from.has_streamend()) {
      mutable_streamend()->::StreamEndMsg::MergeFrom(from.streamend());
    }
    if (from.has_numclientsreplies()) {
      mutable_numclientsreplies()->::NumClientsReplyMsg::MergeFrom(from.numclientsreplies());
    }
    if (from.has_newstream()) {
      mutable_newstream()->::NewStreamMsg::MergeFrom(from.newstream());
    }
    if (from.has_stopstream()) {
      mutable_stopstream()->::StopStreamMsg::MergeFrom(from.stopstream());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void IMSMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IMSMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMSMessage::CopyFrom(const IMSMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IMSMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMSMessage::IsInitialized() const {

  return true;
}

void IMSMessage::Swap(IMSMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMSMessage::InternalSwap(IMSMessage* other) {
  std::swap(seqno_, other->seqno_);
  cmd_.Swap(&other->cmd_);
  std::swap(addstream_, other->addstream_);
  std::swap(delstream_, other->delstream_);
  std::swap(streamend_, other->streamend_);
  std::swap(numclientsreplies_, other->numclientsreplies_);
  std::swap(newstream_, other->newstream_);
  std::swap(stopstream_, other->stopstream_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IMSMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IMSMessage_descriptor_;
  metadata.reflection = IMSMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMSMessage

// optional int64 seqNo = 1;
bool IMSMessage::has_seqno() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void IMSMessage::set_has_seqno() {
  _has_bits_[0] |= 0x00000001u;
}
void IMSMessage::clear_has_seqno() {
  _has_bits_[0] &= ~0x00000001u;
}
void IMSMessage::clear_seqno() {
  seqno_ = GOOGLE_LONGLONG(0);
  clear_has_seqno();
}
 ::google::protobuf::int64 IMSMessage::seqno() const {
  // @@protoc_insertion_point(field_get:IMSMessage.seqNo)
  return seqno_;
}
 void IMSMessage::set_seqno(::google::protobuf::int64 value) {
  set_has_seqno();
  seqno_ = value;
  // @@protoc_insertion_point(field_set:IMSMessage.seqNo)
}

// optional string cmd = 2;
bool IMSMessage::has_cmd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void IMSMessage::set_has_cmd() {
  _has_bits_[0] |= 0x00000002u;
}
void IMSMessage::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000002u;
}
void IMSMessage::clear_cmd() {
  cmd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cmd();
}
 const ::std::string& IMSMessage::cmd() const {
  // @@protoc_insertion_point(field_get:IMSMessage.cmd)
  return cmd_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMSMessage::set_cmd(const ::std::string& value) {
  set_has_cmd();
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IMSMessage.cmd)
}
 void IMSMessage::set_cmd(const char* value) {
  set_has_cmd();
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IMSMessage.cmd)
}
 void IMSMessage::set_cmd(const char* value, size_t size) {
  set_has_cmd();
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IMSMessage.cmd)
}
 ::std::string* IMSMessage::mutable_cmd() {
  set_has_cmd();
  // @@protoc_insertion_point(field_mutable:IMSMessage.cmd)
  return cmd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IMSMessage::release_cmd() {
  // @@protoc_insertion_point(field_release:IMSMessage.cmd)
  clear_has_cmd();
  return cmd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMSMessage::set_allocated_cmd(::std::string* cmd) {
  if (cmd != NULL) {
    set_has_cmd();
  } else {
    clear_has_cmd();
  }
  cmd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cmd);
  // @@protoc_insertion_point(field_set_allocated:IMSMessage.cmd)
}

// optional .AddStreamMsg addStream = 3;
bool IMSMessage::has_addstream() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void IMSMessage::set_has_addstream() {
  _has_bits_[0] |= 0x00000004u;
}
void IMSMessage::clear_has_addstream() {
  _has_bits_[0] &= ~0x00000004u;
}
void IMSMessage::clear_addstream() {
  if (addstream_ != NULL) addstream_->::AddStreamMsg::Clear();
  clear_has_addstream();
}
const ::AddStreamMsg& IMSMessage::addstream() const {
  // @@protoc_insertion_point(field_get:IMSMessage.addStream)
  return addstream_ != NULL ? *addstream_ : *default_instance_->addstream_;
}
::AddStreamMsg* IMSMessage::mutable_addstream() {
  set_has_addstream();
  if (addstream_ == NULL) {
    addstream_ = new ::AddStreamMsg;
  }
  // @@protoc_insertion_point(field_mutable:IMSMessage.addStream)
  return addstream_;
}
::AddStreamMsg* IMSMessage::release_addstream() {
  // @@protoc_insertion_point(field_release:IMSMessage.addStream)
  clear_has_addstream();
  ::AddStreamMsg* temp = addstream_;
  addstream_ = NULL;
  return temp;
}
void IMSMessage::set_allocated_addstream(::AddStreamMsg* addstream) {
  delete addstream_;
  addstream_ = addstream;
  if (addstream) {
    set_has_addstream();
  } else {
    clear_has_addstream();
  }
  // @@protoc_insertion_point(field_set_allocated:IMSMessage.addStream)
}

// optional .DelStreamMsg delStream = 4;
bool IMSMessage::has_delstream() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void IMSMessage::set_has_delstream() {
  _has_bits_[0] |= 0x00000008u;
}
void IMSMessage::clear_has_delstream() {
  _has_bits_[0] &= ~0x00000008u;
}
void IMSMessage::clear_delstream() {
  if (delstream_ != NULL) delstream_->::DelStreamMsg::Clear();
  clear_has_delstream();
}
const ::DelStreamMsg& IMSMessage::delstream() const {
  // @@protoc_insertion_point(field_get:IMSMessage.delStream)
  return delstream_ != NULL ? *delstream_ : *default_instance_->delstream_;
}
::DelStreamMsg* IMSMessage::mutable_delstream() {
  set_has_delstream();
  if (delstream_ == NULL) {
    delstream_ = new ::DelStreamMsg;
  }
  // @@protoc_insertion_point(field_mutable:IMSMessage.delStream)
  return delstream_;
}
::DelStreamMsg* IMSMessage::release_delstream() {
  // @@protoc_insertion_point(field_release:IMSMessage.delStream)
  clear_has_delstream();
  ::DelStreamMsg* temp = delstream_;
  delstream_ = NULL;
  return temp;
}
void IMSMessage::set_allocated_delstream(::DelStreamMsg* delstream) {
  delete delstream_;
  delstream_ = delstream;
  if (delstream) {
    set_has_delstream();
  } else {
    clear_has_delstream();
  }
  // @@protoc_insertion_point(field_set_allocated:IMSMessage.delStream)
}

// optional .StreamEndMsg streamEnd = 5;
bool IMSMessage::has_streamend() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void IMSMessage::set_has_streamend() {
  _has_bits_[0] |= 0x00000010u;
}
void IMSMessage::clear_has_streamend() {
  _has_bits_[0] &= ~0x00000010u;
}
void IMSMessage::clear_streamend() {
  if (streamend_ != NULL) streamend_->::StreamEndMsg::Clear();
  clear_has_streamend();
}
const ::StreamEndMsg& IMSMessage::streamend() const {
  // @@protoc_insertion_point(field_get:IMSMessage.streamEnd)
  return streamend_ != NULL ? *streamend_ : *default_instance_->streamend_;
}
::StreamEndMsg* IMSMessage::mutable_streamend() {
  set_has_streamend();
  if (streamend_ == NULL) {
    streamend_ = new ::StreamEndMsg;
  }
  // @@protoc_insertion_point(field_mutable:IMSMessage.streamEnd)
  return streamend_;
}
::StreamEndMsg* IMSMessage::release_streamend() {
  // @@protoc_insertion_point(field_release:IMSMessage.streamEnd)
  clear_has_streamend();
  ::StreamEndMsg* temp = streamend_;
  streamend_ = NULL;
  return temp;
}
void IMSMessage::set_allocated_streamend(::StreamEndMsg* streamend) {
  delete streamend_;
  streamend_ = streamend;
  if (streamend) {
    set_has_streamend();
  } else {
    clear_has_streamend();
  }
  // @@protoc_insertion_point(field_set_allocated:IMSMessage.streamEnd)
}

// optional .NumClientsReplyMsg NumClientsReplies = 6;
bool IMSMessage::has_numclientsreplies() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void IMSMessage::set_has_numclientsreplies() {
  _has_bits_[0] |= 0x00000020u;
}
void IMSMessage::clear_has_numclientsreplies() {
  _has_bits_[0] &= ~0x00000020u;
}
void IMSMessage::clear_numclientsreplies() {
  if (numclientsreplies_ != NULL) numclientsreplies_->::NumClientsReplyMsg::Clear();
  clear_has_numclientsreplies();
}
const ::NumClientsReplyMsg& IMSMessage::numclientsreplies() const {
  // @@protoc_insertion_point(field_get:IMSMessage.NumClientsReplies)
  return numclientsreplies_ != NULL ? *numclientsreplies_ : *default_instance_->numclientsreplies_;
}
::NumClientsReplyMsg* IMSMessage::mutable_numclientsreplies() {
  set_has_numclientsreplies();
  if (numclientsreplies_ == NULL) {
    numclientsreplies_ = new ::NumClientsReplyMsg;
  }
  // @@protoc_insertion_point(field_mutable:IMSMessage.NumClientsReplies)
  return numclientsreplies_;
}
::NumClientsReplyMsg* IMSMessage::release_numclientsreplies() {
  // @@protoc_insertion_point(field_release:IMSMessage.NumClientsReplies)
  clear_has_numclientsreplies();
  ::NumClientsReplyMsg* temp = numclientsreplies_;
  numclientsreplies_ = NULL;
  return temp;
}
void IMSMessage::set_allocated_numclientsreplies(::NumClientsReplyMsg* numclientsreplies) {
  delete numclientsreplies_;
  numclientsreplies_ = numclientsreplies;
  if (numclientsreplies) {
    set_has_numclientsreplies();
  } else {
    clear_has_numclientsreplies();
  }
  // @@protoc_insertion_point(field_set_allocated:IMSMessage.NumClientsReplies)
}

// optional .NewStreamMsg newStream = 7;
bool IMSMessage::has_newstream() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void IMSMessage::set_has_newstream() {
  _has_bits_[0] |= 0x00000040u;
}
void IMSMessage::clear_has_newstream() {
  _has_bits_[0] &= ~0x00000040u;
}
void IMSMessage::clear_newstream() {
  if (newstream_ != NULL) newstream_->::NewStreamMsg::Clear();
  clear_has_newstream();
}
const ::NewStreamMsg& IMSMessage::newstream() const {
  // @@protoc_insertion_point(field_get:IMSMessage.newStream)
  return newstream_ != NULL ? *newstream_ : *default_instance_->newstream_;
}
::NewStreamMsg* IMSMessage::mutable_newstream() {
  set_has_newstream();
  if (newstream_ == NULL) {
    newstream_ = new ::NewStreamMsg;
  }
  // @@protoc_insertion_point(field_mutable:IMSMessage.newStream)
  return newstream_;
}
::NewStreamMsg* IMSMessage::release_newstream() {
  // @@protoc_insertion_point(field_release:IMSMessage.newStream)
  clear_has_newstream();
  ::NewStreamMsg* temp = newstream_;
  newstream_ = NULL;
  return temp;
}
void IMSMessage::set_allocated_newstream(::NewStreamMsg* newstream) {
  delete newstream_;
  newstream_ = newstream;
  if (newstream) {
    set_has_newstream();
  } else {
    clear_has_newstream();
  }
  // @@protoc_insertion_point(field_set_allocated:IMSMessage.newStream)
}

// optional .StopStreamMsg stopStream = 8;
bool IMSMessage::has_stopstream() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void IMSMessage::set_has_stopstream() {
  _has_bits_[0] |= 0x00000080u;
}
void IMSMessage::clear_has_stopstream() {
  _has_bits_[0] &= ~0x00000080u;
}
void IMSMessage::clear_stopstream() {
  if (stopstream_ != NULL) stopstream_->::StopStreamMsg::Clear();
  clear_has_stopstream();
}
const ::StopStreamMsg& IMSMessage::stopstream() const {
  // @@protoc_insertion_point(field_get:IMSMessage.stopStream)
  return stopstream_ != NULL ? *stopstream_ : *default_instance_->stopstream_;
}
::StopStreamMsg* IMSMessage::mutable_stopstream() {
  set_has_stopstream();
  if (stopstream_ == NULL) {
    stopstream_ = new ::StopStreamMsg;
  }
  // @@protoc_insertion_point(field_mutable:IMSMessage.stopStream)
  return stopstream_;
}
::StopStreamMsg* IMSMessage::release_stopstream() {
  // @@protoc_insertion_point(field_release:IMSMessage.stopStream)
  clear_has_stopstream();
  ::StopStreamMsg* temp = stopstream_;
  stopstream_ = NULL;
  return temp;
}
void IMSMessage::set_allocated_stopstream(::StopStreamMsg* stopstream) {
  delete stopstream_;
  stopstream_ = stopstream;
  if (stopstream) {
    set_has_stopstream();
  } else {
    clear_has_stopstream();
  }
  // @@protoc_insertion_point(field_set_allocated:IMSMessage.stopStream)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
